<div class="theme-button-wrapper no-print">
    <label class="theme-button" for="checkbox">
        <input type="checkbox" id="checkbox" />
        <div class="button">
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="currentColor"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="feather feather-sun"
            >
                <circle cx="12" cy="12" r="5"></circle>
                <line x1="12" y1="1" x2="12" y2="3"></line>
                <line x1="12" y1="21" x2="12" y2="23"></line>
                <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
                <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
                <line x1="1" y1="12" x2="3" y2="12"></line>
                <line x1="21" y1="12" x2="23" y2="12"></line>
                <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
                <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
            </svg>
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="currentColor"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="feather feather-moon"
            >
                <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"
                ></path>
            </svg>
        </div>
    </label>
</div>

<style>
    .theme-button-wrapper {
        position: fixed;
        bottom: 20px;
        right: 20px;
    }

    .theme-button {
        cursor: pointer;
        display: flex;
        align-items: center;
    }

    .button {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        overflow: hidden; /* Para asegurar que el contenido no se salga del círculo */
        transition: all 0.3s ease;
    }

    /* Estilo del checkbox (puedes personalizarlo según tus necesidades) */
    #checkbox {
        display: none;
    }

    /* Estilo de los iconos dentro del botón */
    .theme-button svg {
        width: 20px; /* Ajusta el ancho del icono */
        height: 20px; /* Ajusta la altura del icono */
    }

    /* Estilo específico para el sol y la luna */
    .feather-sun,
    .feather-moon {
        display: none; /* Oculta los SVG por defecto */
    }

    /* Estilo específico para el sol */
    #checkbox:checked + .button .feather-sun {
        display: block; /* Muestra el sol cuando el checkbox está marcado */
    }

    #checkbox:checked + .button {
        border: 1px solid var(--border-a);
        color: var(--text-a);
    }

    #checkbox:checked + .button:hover {
        color: var(--text-a-hover);
        background-color: var(--background-a-hover);
    }

    /* Estilo específico para la luna */
    #checkbox:not(:checked) + .button .feather-moon {
        display: block; /* Muestra la luna cuando el checkbox no está marcado */
    }

    #checkbox:not(:checked) + .button {
        border: 1px solid var(--border-a);
        color: var(--text-a);
    }

    #checkbox:not(:checked) + .button:hover {
        color: var(--text-a-hover);
        background-color: var(--background-a-hover);
    }
</style>

<script>
    // Obtiene el elemento "body"
    const body = document.body;

    // Obtiene el elemento con el ID "checkbox" y aseguramos que sea un elemento de entrada (checkbox) utilizando la conversión "as HTMLInputElement"
    const checkbox = document.getElementById("checkbox") as HTMLInputElement;

    // Función para aplicar el tema según la preferencia del sistema
    function applySystemTheme() {
        const prefersDarkMode = window.matchMedia(
            "(prefers-color-scheme: dark)"
        ).matches;

        if (prefersDarkMode) {
            body.setAttribute("data-theme", "dark");
            checkbox.checked = true;
        } else {
            body.setAttribute("data-theme", "light");
            checkbox.checked = false;
        }
    }

    // Llama a la función para aplicar el tema antes de que la página esté completamente cargada
    applySystemTheme();

    // Agrega un escuchador de eventos "DOMContentLoaded" para el resto del código
    document.addEventListener("DOMContentLoaded", function () {
        // Agrega un escuchador de eventos "change" al elemento checkbox
        checkbox.addEventListener("change", function () {
            // Verifica si la casilla de verificación está marcada
            if (this.checked) {
                // Si está marcada, establece el atributo "data-theme" del elemento "body" a "dark"
                body.setAttribute("data-theme", "dark");
            } else {
                // Si no está marcada, establece el atributo "data-theme" del elemento "body" a "light"
                body.setAttribute("data-theme", "light");
            }
        });

        // Agrega un escuchador de eventos para detectar cambios en la preferencia de color del sistema
        window
            .matchMedia("(prefers-color-scheme: dark)")
            .addEventListener("change", applySystemTheme);
    });
</script>
